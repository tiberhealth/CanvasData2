import os.path

from datetime import datetime
from tqdm import tqdm


class SchemaWriter:

    def __init__(self, logger, workspace, settings):
        self.logger = logger
        self.workspace = workspace
        self.settings = settings

    def write(self, schema, csv_files = None):
        self.logger.detail("Starting SQL File Generation")
        self.logger.debug(f"Writing file to SQL Root {self.workspace.sql}")

        pbar = tqdm(total=len(schema)) if not self.logger.is_debug else None

        source_files = []
        for key, schema in schema.items():
            csv_file = csv_files.get(key, None) if csv_files is not None else None
            source_files.append(self.write_table_sql(schema, pbar, csv_file))

        self.write_control_sql(source_files)

        if pbar is not None:
            pbar.close()

        self.logger.detail("Completed SQL File Generation")

    def write_table_sql(self, schema, pbar, csv_file) -> str:
        workspace_file = f"{self.workspace.sql}/{schema.table_name}.sql"

        self.logger.debug(f"Starting creating sql file: {workspace_file}")

        with open(workspace_file, 'w', encoding="UTF-8") as sql_file:
            sql_file.write(f"#\n# Sql Create for Table: {schema.table_name}\n")
            sql_file.write(f"# Generated: {datetime.utcnow()}\n")

            if csv_file is not None and self.settings.include_sql_load:
                sql_file.write("# Including SQL Load script")

            self.header_commen(sql_file)
            sql_file.write(schema.table_sql())
            sql_file.write("\n")

            if csv_file is not None and self.settings.include_sql_load:
                sql_file.write("\n\n")
                sql_file.write("# Sql Load\n\n")
                sql_file.write(schema.load_file(csv_file))
                sql_file.write("\n")

            self.finish_sql_file(sql_file)

        if pbar is not None:
            pbar.update(1)

        self.logger.debug(f"Completed creating sql file: {workspace_file}")

        return os.path.abspath(workspace_file)

    def write_control_sql(self, sources):
        workspace_file = f"{self.workspace.sql}/build_all.sql"

        self.logger.debug("Staring creation of build all sql file")

        with open(workspace_file, 'w', encoding="UTF-8") as sql_file:
            sql_file.write("#\n")
            sql_file.write("# build_all.sql\n")
            self.header_commen(sql_file)

            for source_file in sources:
                sql_file.write(f"select 'Executing {source_file}';\n")
                sql_file.write(f"source {source_file}\n")
                sql_file.write("\n")

            sql_file.write(f"select 'Completed -> {datetime.utcnow().strftime('%m/%d/%Y %I:%M:%S %p Zulu')}'")
            self.finish_sql_file(sql_file)

        self.logger.debug("Completed creation of build all sql file")
        self.logger.detail(f"build_all.sql file located at {os.path.abspath(workspace_file)}")

    @staticmethod
    def header_commen(sql_file):
        sql_file.write("# Generated by Tiber Health Innovation's Canvas Data 2 Create Table Script Generator")
        sql_file.write("# \n")
        sql_file.write(f"# Generated: {datetime.utcnow().strftime('%m/%d/%Y %I:%M:%S %p Zulu')}")
        sql_file.write("# \n")
        sql_file.write("# This file is auto generated and edits will not be preserved.\n")
        sql_file.write("# \n\n")

    @staticmethod
    def finish_sql_file(sql_file):
        sql_file.write("\n")  # Add a blank line before script copyright
        sql_file.write("## Generated by Tiber Health Innovation's Canvas Data 2 Create Table Script Generator ")
        sql_file.write(f"-  (c) {datetime.utcnow().strftime('%Y')} - Tiber Health\n")
        sql_file.write("\n")  # Add a blank line at the end of the file
        sql_file.flush()
        sql_file.close()
